#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>

void bubble_sort(int a[50],int n)
{
inti,j,temp;
for(i=n-1;i>0;i--)
{
for(j=0;j<i;j++)
{
if(a[j]>a[j+1])
{
temp=a[j];
a[j]=a[j+1];
a[j+1]=temp;

}
}
}

2

printf("\nSorted Array is:\n");
for(i=0;i<n;i++)
{
printf("%d\n",a[i]);
}
}

int main(int argc,char *argv[])
{
int i,j=2,l,k;

int n=argc-2;
int a[n];
char *args[n+1];
args[0]=argv[1];

for(i=1;i<=n;i++,j++)
{
args[i]=argv[j];
}
args[i]=(char*)0;

for(l=0,i=1;i<=n;i++,l++)
{
a[l]=atoi(args[i]);

}
bubble_sort(a,n);

for(l=0,i=1;i<=n;i++,l++)

3

{
printf(args[i],"%d",a[l]);
}

pid_t pid;
pid=fork();

if(pid==0)
{
printf("\n I am Child Process,my pid is %d \n",getpid());
printf("I am Parent Process,my pid is %d \n",getppid());
execve(argv[1],args,NULL);
}
else
{
k=wait(0);
printf("\n I am Parent Process,my pid is %d \n",getpid());
printf("I am Parent's Parent Process,my pid is %d \n\n",getppid());
}

return 0;
}
Second.c→
#include<stdio.h>

void bubble_sort(int a[50],int n)
{
inti,j,temp;

4

for(i=n-1;i>0;i--)
{
for(j=0;j<i;j++)
{
if(a[j]<a[j+1])
{
temp=a[j];
a[j]=a[j+1];
a[j+1]=temp;
}
}
}
printf("\nSorted Array is:\n");
for(i=0;i<n;i++)
{
printf("%d\n",a[i]);
}
}
int main(int argc,char *argv[])
{
inti,j=1,l,key;

int n=argc-1;
int a[n];

char *args[n+1];

printf("\n Pid of the 2nd program is:%d\n",getpid());

for(i=0;i<=n;i++,j++)

5

{
args[i]=argv[j];
}
args[i]=(char*)0;

for(l=0,i=0;i<n;i++,l++)
{
a[l]=atoi(args[i]);
}

bubble_sort(a,n);
}

Output :
desktop@desk:~/Desktop$ gcc first.c -o execve
first.c: In function ‘main’:
first.c:44:22: warning: implicit declaration of function ‘atoi’[-Wimplicit-function-declaration]
44 | a[l]=atoi(args[i]);
| ^~~~
first.c:64:19: warning: implicit declaration of function ‘wait’[-Wimplicit-function-declaration]
64 | k=wait(0);
| ^~~~
Desktop@desk:~/Desktop$ gcc
